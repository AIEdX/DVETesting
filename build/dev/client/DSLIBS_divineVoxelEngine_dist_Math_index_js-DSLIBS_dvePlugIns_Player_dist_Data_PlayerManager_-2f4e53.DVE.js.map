{"version":3,"file":"DSLIBS_divineVoxelEngine_dist_Math_index_js-DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_-2f4e53.DVE.js","mappings":";;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3CO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACpDuC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gDAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,uBAAuB;AAChD,iCAAiC,2BAA2B;AAC5D,qCAAqC,2BAA2B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD,6BAA6B,gCAAgC;AAC7D,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,SAAS;AACtC,6BAA6B,gCAAgC;AAC7D,iCAAiC,gCAAgC;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,EAAE,GAAG,EAAE,GAAG,EAAE;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC5JO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC3LO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;ACJO;AACP;AACA;;;;;;;;;;;;;;;;;ACF6C;AACtC;AACP;AACA;AACA,0BAA0B,0DAAU;AACpC,0BAA0B,0DAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO;AACP;AACA;AACA,0BAA0B,0DAAU;AACpC,0BAA0B,0DAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;;;;;;;;;;;;ACpEU;;;;;;;;;;;;;;;;;;;;ACA6C;AACZ;AACwB;AACpB;AACI;AACnD;AACA;AACA;AACA;AACA;AACO;AACP,cAAc,4DAAQ;AACtB;AACA,mBAAmB,wDAAO;AAC1B,KAAK;AACL;AACA,mBAAmB,oDAAK;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,mBAAmB,4EAAiB;AACpC,KAAK;AACL;AACA,mBAAmB,gEAAW;AAC9B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9C+B;AACU;AACN;AACY;AACV;AACA;AACK;AACA;AACE;AACJ;AACF;;;;;;;;;;;;;;;ACV/B;AACP;AACA,eAAe;AACf,aAAa;AACb,mBAAmB;AACnB;;;;;;;;;;;;;;;;;;;ACLsD;AAC/C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,8BAA8B,gEAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACnM+D;AACxD,4BAA4B,yEAAgB;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1EgD;AACa;AACJ;AAClD;AACP,wCAAwC,0DAAU;AAClD;AACA,YAAY,6EAA0B;AACtC;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,mFAAgC;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,kFAA+B;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,gFAA6B;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,oFAAiC;AAC7C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,sFAAmC;AAC/C;AACA;AACA,KAAK;AACL;AACA,YAAY,+FAA4C;AACxD;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL;AACA,YAAY,sFAAmC;AAC/C;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL,oCAAoC,2BAA2B;AAC/D,sCAAsC,0DAAU;AAChD;AACA,YAAY,yEAAwB;AACpC;AACA;AACA,KAAK;AACL;AACA,YAAY,wEAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,sEAAqB;AACjC;AACA;AACA,KAAK;AACL;AACA,YAAY,8EAA6B;AACzC;AACA;AACA,KAAK;AACL;AACA,YAAY,0EAAyB;AACrC;AACA;AACA,KAAK;AACL;AACA,YAAY,gFAA+B;AAC3C;AACA;AACA,KAAK;AACL;AACA,YAAY,6EAA4B;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,wEAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,4EAA2B;AACvC;AACA;AACA,KAAK;AACL;AACA,YAAY,4EAA2B;AACvC;AACA;AACA,KAAK;AACL,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA","sources":["webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Classes/BoundingBox.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Classes/Plane.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Classes/SimpleBoundingBox.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Classes/Vector3.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Functions/Distance2d.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Functions/Distance3d.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Functions/DistnaceSort.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Functions/VisitAll.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/Types/Math.types.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/VoxelMath.js","webpack://dve-testing/../../DSLIBS/divineVoxelEngine/dist/Math/index.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerManager.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerPhysicsData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerStatsData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/RegisterPlayerData.js"],"sourcesContent":["export class BoundingBox {\r\n    topPlane;\r\n    bottomPlane;\r\n    northPlane;\r\n    southPlane;\r\n    eastPlane;\r\n    westPlane;\r\n    bounds = {\r\n        minX: Infinity,\r\n        maxX: -Infinity,\r\n        minZ: Infinity,\r\n        maxZ: -Infinity,\r\n        minY: Infinity,\r\n        maxY: -Infinity,\r\n    };\r\n    constructor(data) {\r\n        this.topPlane = data.topPlane;\r\n        this._doMinMaxCheck(this.topPlane);\r\n        this.bottomPlane = data.bottomPlane;\r\n        this._doMinMaxCheck(this.bottomPlane);\r\n        this.northPlane = data.northPlane;\r\n        this._doMinMaxCheck(this.northPlane);\r\n        this.southPlane = data.southPlane;\r\n        this._doMinMaxCheck(this.southPlane);\r\n        this.eastPlane = data.eastPlane;\r\n        this._doMinMaxCheck(this.eastPlane);\r\n        this.westPlane = data.westPlane;\r\n        this._doMinMaxCheck(this.westPlane);\r\n    }\r\n    _doMinMaxCheck(plane) {\r\n        if (plane.minX <= this.bounds.minX)\r\n            this.bounds.minX = plane.minX;\r\n        if (plane.maxX >= this.bounds.maxX)\r\n            this.bounds.maxX = plane.maxX;\r\n        if (plane.minY <= this.bounds.minY)\r\n            this.bounds.minY = plane.minY;\r\n        if (plane.maxY >= this.bounds.maxY)\r\n            this.bounds.maxY = plane.maxY;\r\n        if (plane.minZ <= this.bounds.minZ)\r\n            this.bounds.minZ = plane.minZ;\r\n        if (plane.maxZ >= this.bounds.maxZ)\r\n            this.bounds.maxZ = plane.maxZ;\r\n    }\r\n}\r\n","export class Plane {\r\n    v1;\r\n    v2;\r\n    v3;\r\n    v4;\r\n    minX = Infinity;\r\n    maxX = -Infinity;\r\n    minZ = Infinity;\r\n    maxZ = -Infinity;\r\n    minY = Infinity;\r\n    maxY = -Infinity;\r\n    constructor(data) {\r\n        this.v1 = data.v1;\r\n        this.v2 = data.v2;\r\n        this.v3 = data.v3;\r\n        this.v4 = data.v4;\r\n        this._minMaxCompare(this.v1, this.v2);\r\n        this._minMaxCompare(this.v1, this.v3);\r\n        this._minMaxCompare(this.v1, this.v4);\r\n        this._minMaxCompare(this.v2, this.v3);\r\n        this._minMaxCompare(this.v2, this.v4);\r\n        this._minMaxCompare(this.v3, this.v4);\r\n    }\r\n    _compareVales(v1, v2, axis, minProperty, maxProperty) {\r\n        const c1 = v1;\r\n        const c2 = v2;\r\n        if (c1[axis] < this[minProperty]) {\r\n            if (c1[axis] <= c2[axis]) {\r\n                this[minProperty] = c1[axis];\r\n            }\r\n        }\r\n        if (c2[axis] < this[minProperty]) {\r\n            if (c2[axis] <= c1[axis]) {\r\n                this[minProperty] = c2[axis];\r\n            }\r\n        }\r\n        if (c1[axis] > this[maxProperty]) {\r\n            if (c1[axis] >= c2[axis]) {\r\n                this[maxProperty] = c1[axis];\r\n            }\r\n        }\r\n        if (c2[axis] > this[maxProperty]) {\r\n            if (c2[axis] >= c1[axis]) {\r\n                this[maxProperty] = c2[axis];\r\n            }\r\n        }\r\n    }\r\n    _minMaxCompare(v1, v2) {\r\n        this._compareVales(v1, v2, \"x\", \"minX\", \"maxX\");\r\n        this._compareVales(v1, v2, \"y\", \"minY\", \"maxY\");\r\n        this._compareVales(v1, v2, \"z\", \"minZ\", \"maxZ\");\r\n    }\r\n}\r\n","import { Vector3 } from \"./Vector3.js\";\r\nexport class SimpleBoundingBox {\r\n    origin;\r\n    dimensions;\r\n    bounds = {\r\n        minX: Infinity,\r\n        maxX: -Infinity,\r\n        minZ: Infinity,\r\n        maxZ: -Infinity,\r\n        minY: Infinity,\r\n        maxY: -Infinity,\r\n    };\r\n    checkBounds = {\r\n        minX: Infinity,\r\n        maxX: -Infinity,\r\n        minZ: Infinity,\r\n        maxZ: -Infinity,\r\n        minY: Infinity,\r\n        maxY: -Infinity,\r\n    };\r\n    checkOrigin = new Vector3(0, 0, 0);\r\n    _voxelCheckMap = {};\r\n    _voxelCheckPoints = [];\r\n    _voxelBottomCheckPoints = [];\r\n    _voxelOriginPoints = [];\r\n    constructor(origin, dimensions) {\r\n        this.origin = origin;\r\n        this.dimensions = dimensions;\r\n        const ov = origin;\r\n        this.checkOrigin.updateVector(ov.x, ov.y, ov.z);\r\n        this._updateBounds();\r\n        this._updateCheckBounds();\r\n    }\r\n    _updateBounds() {\r\n        const ov = this.origin;\r\n        this.bounds.minX = ov.x - this.dimensions.w / 2;\r\n        this.bounds.maxX = ov.x + this.dimensions.w / 2;\r\n        this.bounds.minZ = ov.z - this.dimensions.d / 2;\r\n        this.bounds.maxZ = ov.z + this.dimensions.d / 2;\r\n        this.bounds.minY = ov.y - this.dimensions.h / 2;\r\n        this.bounds.maxY = ov.y + this.dimensions.h / 2;\r\n    }\r\n    _updateCheckBounds() {\r\n        const cv = this.checkOrigin;\r\n        this.checkBounds.minX = cv.x - this.dimensions.w / 2;\r\n        this.checkBounds.maxX = cv.x + this.dimensions.w / 2;\r\n        this.checkBounds.minZ = cv.z - this.dimensions.d / 2;\r\n        this.checkBounds.maxZ = cv.z + this.dimensions.d / 2;\r\n        this.checkBounds.minY = cv.y - this.dimensions.h / 2;\r\n        this.checkBounds.maxY = cv.y + this.dimensions.h / 2;\r\n    }\r\n    updateOrigin(x, y, z) {\r\n        this.origin.updateVector(x, y, z);\r\n        this.origin.roundVector(2);\r\n        this._updateBounds();\r\n    }\r\n    setOriginToCheckOrigin() {\r\n        const cv = this.checkOrigin;\r\n        this.origin.updateVector(cv.x, cv.y, cv.z);\r\n        this.bounds.minX = this.checkBounds.minX;\r\n        this.bounds.maxX = this.checkBounds.maxX;\r\n        this.bounds.minZ = this.checkBounds.minZ;\r\n        this.bounds.maxZ = this.checkBounds.maxZ;\r\n        this.bounds.minY = this.checkBounds.minY;\r\n        this.bounds.maxY = this.checkBounds.maxY;\r\n    }\r\n    setCheckOrigin(x, y, z) {\r\n        this.checkOrigin.updateVector(x, y, z);\r\n        this._updateCheckBounds();\r\n    }\r\n    getCurrentOriginPoints() {\r\n        this._voxelOriginPoints = [];\r\n        const mx = this.bounds.minX;\r\n        const my = this.bounds.minY;\r\n        const mz = this.bounds.minZ;\r\n        for (let y = my; y <= this.bounds.maxY; y++) {\r\n            for (let x = mx - 1; x <= this.bounds.maxX + 1; x++) {\r\n                for (let z = mz - 1; z <= this.bounds.maxZ + 1; z++) {\r\n                    const key = this._getPositionKey(x, y, z);\r\n                    if (!this._voxelCheckMap[key]) {\r\n                        this._voxelOriginPoints.push([x, y, z]);\r\n                        this._voxelCheckMap[key] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._voxelCheckMap = {};\r\n        return this._voxelOriginPoints;\r\n    }\r\n    getVoxelCheckPoints() {\r\n        this._voxelCheckPoints = [];\r\n        const mx = this.checkBounds.minX;\r\n        const my = this.checkBounds.minY;\r\n        const mz = this.checkBounds.minZ;\r\n        for (let y = my; y <= this.checkBounds.maxY; y++) {\r\n            for (let x = mx; x <= this.checkBounds.maxX + 1; x++) {\r\n                for (let z = mz; z <= this.checkBounds.maxZ + 1; z++) {\r\n                    const key = this._getPositionKey(x, y, z);\r\n                    if (!this._voxelCheckMap[key]) {\r\n                        this._voxelCheckPoints.push([\r\n                            Math.floor(x),\r\n                            Math.floor(y),\r\n                            Math.floor(z),\r\n                        ]);\r\n                        this._voxelCheckMap[key] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._voxelCheckMap = {};\r\n        return this._voxelCheckPoints;\r\n    }\r\n    getVoxelBottomCheckPoints() {\r\n        this._voxelBottomCheckPoints = [];\r\n        const mx = this.checkBounds.minX;\r\n        const my = this.checkBounds.minY;\r\n        const mz = this.checkBounds.minZ;\r\n        for (let y = my - 1; y <= my; y++) {\r\n            for (let x = mx; x <= this.checkBounds.maxX + 1; x++) {\r\n                for (let z = mz; z <= this.checkBounds.maxZ + 1; z++) {\r\n                    const key = this._getPositionKey(x, y, z);\r\n                    if (!this._voxelCheckMap[key]) {\r\n                        this._voxelBottomCheckPoints.push([\r\n                            Math.floor(x),\r\n                            Math.floor(y),\r\n                            Math.floor(z),\r\n                        ]);\r\n                        this._voxelCheckMap[key] = true;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._voxelCheckMap = {};\r\n        return this._voxelBottomCheckPoints;\r\n    }\r\n    _getPositionKey(x, y, z) {\r\n        return `${x}-${y}-${z}`;\r\n    }\r\n    isPointInsideBox(point) {\r\n        const box = this.bounds;\r\n        return (point.x >= box.minX &&\r\n            point.x <= box.maxX &&\r\n            point.y >= box.minY &&\r\n            point.y <= box.maxY &&\r\n            point.z >= box.minZ &&\r\n            point.z <= box.maxZ);\r\n    }\r\n    doesBoxIntersect(testBox) {\r\n        const box = this.bounds;\r\n        return (box.minX <= testBox.maxX &&\r\n            box.maxX >= testBox.minX &&\r\n            box.minY <= testBox.maxY &&\r\n            box.maxY >= testBox.minY &&\r\n            box.minZ <= testBox.maxZ &&\r\n            box.maxZ >= testBox.minZ);\r\n    }\r\n}\r\n","export class Vector3 {\r\n    x = 0;\r\n    y = 0;\r\n    z = 0;\r\n    _tv3 = {\r\n        x: 0,\r\n        y: 0,\r\n        z: 0,\r\n    };\r\n    constructor(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    updateFromArray(array, startIndex = 0) {\r\n        this.x = array[startIndex];\r\n        this.y = array[startIndex + 1];\r\n        this.z = array[startIndex + 2];\r\n    }\r\n    updateVector(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    updateFromVec3(vector) {\r\n        this.x = vector.x;\r\n        this.y = vector.y;\r\n        this.z = vector.z;\r\n    }\r\n    roundVector(deciamlPoints = 2) {\r\n        this.x = Number(this.x.toFixed(deciamlPoints));\r\n        this.y = Number(this.y.toFixed(deciamlPoints));\r\n        this.z = Number(this.z.toFixed(deciamlPoints));\r\n    }\r\n    translate(x, y, z) {\r\n        this.x = this.x + x;\r\n        this.y = this.y + y;\r\n        this.z = this.z + z;\r\n        return this;\r\n    }\r\n    getTranslated(x, y, z) {\r\n        this._tv3.x = this.x + x;\r\n        this._tv3.y = this.y + y;\r\n        this._tv3.z = this.z + z;\r\n        return this._tv3;\r\n    }\r\n    scaleXYZ(scaler) {\r\n        this.x = this.x * scaler;\r\n        this.y = this.y * scaler;\r\n        this.z = this.z * scaler;\r\n        return this;\r\n    }\r\n    scale(xScale, yScale, zScale) {\r\n        this.x = this.x * xScale;\r\n        this.y = this.y * yScale;\r\n        this.z = this.z * zScale;\r\n        return this;\r\n    }\r\n    getScaledXYZ(scaler) {\r\n        this._tv3.x = this.x * scaler;\r\n        this._tv3.y = this.y * scaler;\r\n        this._tv3.z = this.z * scaler;\r\n        return this._tv3;\r\n    }\r\n    getScaled(xScale, yScale, zScale) {\r\n        this._tv3.x = this.x * xScale;\r\n        this._tv3.y = this.y * yScale;\r\n        this._tv3.z = this.z * zScale;\r\n        return this._tv3;\r\n    }\r\n    addXYZ(add) {\r\n        this.x = this.x + add;\r\n        this.y = this.y + add;\r\n        this.z = this.z + add;\r\n        return this;\r\n    }\r\n    addFromVec3(vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        this.z += vector.z;\r\n        return this;\r\n    }\r\n    isZero() {\r\n        return !this.x && !this.y && !this.z;\r\n    }\r\n    subtractXYZ(subtract) {\r\n        this.x = this.x - subtract;\r\n        this.y = this.y - subtract;\r\n        this.z = this.z - subtract;\r\n        return this;\r\n    }\r\n    subtractFromObj(vector) {\r\n        this.x = this.x - vector.x;\r\n        this.y = this.y - vector.y;\r\n        this.z = this.z - vector.z;\r\n        return this;\r\n    }\r\n    getAddXYZ(add) {\r\n        this._tv3.x = this.x + add;\r\n        this._tv3.y = this.y + add;\r\n        this._tv3.z = this.z + add;\r\n        return this._tv3;\r\n    }\r\n    getSubtractXYZ(subtract) {\r\n        this._tv3.x = this.x - subtract;\r\n        this._tv3.y = this.y - subtract;\r\n        this._tv3.z = this.z - subtract;\r\n        return this._tv3;\r\n    }\r\n    addVector(vector3) {\r\n        this.x = vector3.x + this.x;\r\n        this.y = vector3.y + this.y;\r\n        this.z = vector3.z + this.z;\r\n        return this;\r\n    }\r\n    getAddedVector(vector3) {\r\n        this._tv3.x = vector3.x + this.x;\r\n        this._tv3.y = vector3.y + this.y;\r\n        this._tv3.z = vector3.z + this.z;\r\n        return this._tv3;\r\n    }\r\n    subtractVector(vector3) {\r\n        this.x = this.x - vector3.x;\r\n        this.y = this.y - vector3.y;\r\n        this.z = this.z - vector3.z;\r\n        return this;\r\n    }\r\n    getSubtractedVector(vector3) {\r\n        this._tv3.x = this.x - vector3.x;\r\n        this._tv3.y = this.y - vector3.y;\r\n        this._tv3.z = this.z - vector3.z;\r\n        return this._tv3;\r\n    }\r\n    scaleVector(vector3) {\r\n        this.x = this.x * vector3.x;\r\n        this.y = this.y * vector3.y;\r\n        this.z = this.z * vector3.z;\r\n        return this;\r\n    }\r\n    getScaledVector(vector3) {\r\n        this._tv3.x = this.x * vector3.x;\r\n        this._tv3.y = this.y * vector3.y;\r\n        this._tv3.z = this.z * vector3.z;\r\n        return this._tv3;\r\n    }\r\n    getLength() {\r\n        return Math.sqrt(this.x ** 2 + this.y ** 2 + this.z ** 2);\r\n    }\r\n    divide(scalar) {\r\n        this.x = this.x / scalar;\r\n        this.y = this.y / scalar;\r\n        this.z = this.z / scalar;\r\n        return this;\r\n    }\r\n    getDivided(scalar) {\r\n        this._tv3.x = this.x / scalar;\r\n        this._tv3.y = this.y / scalar;\r\n        this._tv3.z = this.z / scalar;\r\n        return this._tv3;\r\n    }\r\n    normalize() {\r\n        return this.divide(this.getLength());\r\n    }\r\n    isEqual(vector3) {\r\n        if (this.x != vector3.x) {\r\n            return false;\r\n        }\r\n        if (this.y != vector3.y) {\r\n            return false;\r\n        }\r\n        if (this.z != vector3.z) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    isNotEqual(vector3) {\r\n        if (this.x != vector3.x) {\r\n            return true;\r\n        }\r\n        if (this.y != vector3.y) {\r\n            return true;\r\n        }\r\n        if (this.z != vector3.z) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","export function Distance2D(x1, x2, y1, y2) {\r\n    var dx = x2 - x1;\r\n    var dy = y2 - y1;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n}\r\n","export function Distance3D(x1, y1, z1, x2, y2, z2) {\r\n    return Math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2);\r\n}\r\n","import { Distance3D } from \"./Distance3d.js\";\r\nexport function Vec3ArrayDistanceSort(origion, array) {\r\n    //filter tasks to keep them close to the player\r\n    return array.sort((a, b) => {\r\n        const aDistance = Distance3D(a[0], a[1], a[2], origion[0], origion[1], origion[2]);\r\n        const bDistance = Distance3D(b[0], b[1], b[2], origion[0], origion[1], origion[2]);\r\n        //if a is closer then b put it first\r\n        if (aDistance < bDistance)\r\n            return -1;\r\n        //if b is closer then a put it first\r\n        if (aDistance > bDistance)\r\n            return 1;\r\n        //no change\r\n        return 0;\r\n    });\r\n}\r\nexport function LocationDataDistanceSort(origion, array) {\r\n    //filter tasks to keep them close to the player\r\n    return array.sort((a, b) => {\r\n        const aDistance = Distance3D(a[1], a[2], a[3], origion[1], origion[2], origion[3]);\r\n        const bDistance = Distance3D(b[1], b[2], b[3], origion[1], origion[2], origion[3]);\r\n        //if a is closer then b put it first\r\n        if (aDistance < bDistance)\r\n            return -1;\r\n        //if b is closer then a put it first\r\n        if (aDistance > bDistance)\r\n            return 1;\r\n        //no change\r\n        return 0;\r\n    });\r\n}\r\n","/** # Visit All\r\n * ---\r\n * Given a starting point and an end point it will visit all voxels that are between them.\r\n * @param startPoint\r\n * @param endPoint\r\n * @param visitor\r\n * @returns an array of numbers with a stride of 3 for positions\r\n */\r\nexport const VisitAll = (startPoint, endPoint, visitor = (x, y, z) => {\r\n    return true;\r\n}) => {\r\n    const gx0 = startPoint.x;\r\n    const gy0 = startPoint.y;\r\n    const gz0 = startPoint.z;\r\n    const gx1 = endPoint.x;\r\n    const gy1 = endPoint.y;\r\n    const gz1 = endPoint.z;\r\n    const positons = [];\r\n    const gx0idx = Math.floor(gx0);\r\n    const gy0idx = Math.floor(gy0);\r\n    const gz0idx = Math.floor(gz0);\r\n    const gx1idx = Math.floor(gx1);\r\n    const gy1idx = Math.floor(gy1);\r\n    const gz1idx = Math.floor(gz1);\r\n    const sx = gx1idx > gx0idx ? 1 : gx1idx < gx0idx ? -1 : 0;\r\n    const sy = gy1idx > gy0idx ? 1 : gy1idx < gy0idx ? -1 : 0;\r\n    const sz = gz1idx > gz0idx ? 1 : gz1idx < gz0idx ? -1 : 0;\r\n    let gx = gx0idx;\r\n    let gy = gy0idx;\r\n    let gz = gz0idx;\r\n    const gxp = gx0idx + (gx1idx > gx0idx ? 1 : 0);\r\n    const gyp = gy0idx + (gy1idx > gy0idx ? 1 : 0);\r\n    const gzp = gz0idx + (gz1idx > gz0idx ? 1 : 0);\r\n    const vx = gx1 === gx0 ? 1 : gx1 - gx0;\r\n    const vy = gy1 === gy0 ? 1 : gy1 - gy0;\r\n    const vz = gz1 === gz0 ? 1 : gz1 - gz0;\r\n    const vxvy = vx * vy;\r\n    const vxvz = vx * vz;\r\n    const vyvz = vy * vz;\r\n    let errx = (gxp - gx0) * vyvz;\r\n    let erry = (gyp - gy0) * vxvz;\r\n    let errz = (gzp - gz0) * vxvy;\r\n    const derrx = sx * vyvz;\r\n    const derry = sy * vxvz;\r\n    const derrz = sz * vxvy;\r\n    do {\r\n        if (!visitor(gx, gy, gz))\r\n            break;\r\n        positons.push(gx, gy, gz);\r\n        if (gx === gx1idx && gy === gy1idx && gz === gz1idx)\r\n            break;\r\n        let xr = Math.abs(errx);\r\n        let yr = Math.abs(erry);\r\n        let zr = Math.abs(errz);\r\n        if (sx !== 0 && (sy === 0 || xr < yr) && (sz === 0 || xr < zr)) {\r\n            gx += sx;\r\n            errx += derrx;\r\n        }\r\n        else if (sy !== 0 && (sz === 0 || yr < zr)) {\r\n            gy += sy;\r\n            erry += derry;\r\n        }\r\n        else if (sz !== 0) {\r\n            gz += sz;\r\n            errz += derrz;\r\n        }\r\n    } while (true);\r\n    return positons;\r\n};\r\n","export {};\r\n","import { BoundingBox } from \"./Classes/BoundingBox.js\";\r\nimport { Plane } from \"./Classes/Plane.js\";\r\nimport { SimpleBoundingBox } from \"./Classes/SimpleBoundingBox.js\";\r\nimport { Vector3 } from \"./Classes/Vector3.js\";\r\nimport { VisitAll } from \"./Functions/VisitAll.js\";\r\n/**# Voxel Math\r\n * ---\r\n * Can be used in any thread that needs it.\r\n * Has functions for collision detection, finding voxels in a direction, and path finding.\r\n */\r\nexport const VoxelMath = {\r\n    visitAll: VisitAll,\r\n    getVector3(x, y, z) {\r\n        return new Vector3(x, y, z);\r\n    },\r\n    getPlane(pv1, pv2, pv3, pv4) {\r\n        return new Plane({\r\n            v1: pv1,\r\n            v2: pv2,\r\n            v3: pv3,\r\n            v4: pv4,\r\n        });\r\n    },\r\n    getSimpleBoundingBox(origin, dimensions) {\r\n        return new SimpleBoundingBox(origin, dimensions);\r\n    },\r\n    getBoundingBox(data) {\r\n        return new BoundingBox(data);\r\n    },\r\n    convertToOriginGridSpace(position) {\r\n        position[0] = Math.round(position[0]) + 0.5;\r\n        position[1] = Math.round(position[1]) + 0.5;\r\n        position[2] = Math.round(position[2]) + 0.5;\r\n        return position;\r\n    },\r\n    distance2D(x1, x2, y1, y2) {\r\n        var dx = x2 - x1;\r\n        var dy = y2 - y1;\r\n        return Math.sqrt(dx * dx + dy * dy);\r\n    },\r\n    distance3D(x1, y1, z1, x2, y2, z2) {\r\n        const a = x2 - x1;\r\n        const b = y2 - y1;\r\n        const c = z2 - z1;\r\n        return Math.sqrt(a * a + b * b + c * c);\r\n    },\r\n};\r\n","export * from \"./VoxelMath.js\";\r\nexport * from \"./Classes/BoundingBox.js\";\r\nexport * from \"./Classes/Plane.js\";\r\nexport * from \"./Classes/SimpleBoundingBox.js\";\r\nexport * from \"./Classes/Vector3.js\";\r\nexport * from \"./Classes/Vector3.js\";\r\nexport * from \"./Functions/Distance2d.js\";\r\nexport * from \"./Functions/Distance3d.js\";\r\nexport * from \"./Functions/DistnaceSort.js\";\r\nexport * from \"./Functions/VisitAll.js\";\r\nexport * from \"./Types/Math.types.js\";\r\n","export const PlayerManager = {\r\n    currentDimension: \"main\",\r\n    physics: {},\r\n    stats: {},\r\n    $INIt(data) { },\r\n};\r\n","import { RemoteTagManager } from \"divine-binary-tags\";\r\nexport const PlayerPhysicsStatesValues = {\r\n    still: 0,\r\n    secondaryStill: 1,\r\n    walkingForward: 2,\r\n    walkingBackward: 3,\r\n    walkingLeft: 4,\r\n    walkingRight: 5,\r\n};\r\nexport const PlayerPhysicsTagIDs = {\r\n    header: \"#header\",\r\n    position: \"#position\",\r\n    pickPosition: \"#pick-position\",\r\n    pickNormals: \"#pick-normals\",\r\n    direction: \"#direction\",\r\n    sideDirection: \"#side-direction\",\r\n    rotation: \"#rotation\",\r\n    eyeLevel: \"#eye-level\",\r\n    states: {\r\n        movement: \"#movement-state\",\r\n        secondaryMovement: \"#secondary-movement-state\",\r\n        jumping: \"#is-jumping\",\r\n        running: \"#is-running\",\r\n        onGround: \"#is-on-ground\",\r\n        inWater: \"#is-in-water\",\r\n    },\r\n};\r\nexport const PlayerPhysicsTags = new RemoteTagManager(\"player-physics-tags\");\r\nclass DBTVec3 {\r\n    tagId;\r\n    parent;\r\n    constructor(tagId, parent) {\r\n        this.tagId = tagId;\r\n        if (parent) {\r\n            this.parent = parent;\r\n        }\r\n    }\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    get x() {\r\n        return this.parent.tags.getArrayTagValue(this.tagId, 0);\r\n    }\r\n    set x(v) {\r\n        this.parent.tags.setArrayTagValue(this.tagId, 0, v);\r\n    }\r\n    get y() {\r\n        return this.parent.tags.getArrayTagValue(this.tagId, 1);\r\n    }\r\n    set y(v) {\r\n        this.parent.tags.setArrayTagValue(this.tagId, 1, v);\r\n    }\r\n    get z() {\r\n        return this.parent.tags.getArrayTagValue(this.tagId, 2);\r\n    }\r\n    set z(v) {\r\n        this.parent.tags.setArrayTagValue(this.tagId, 2, v);\r\n    }\r\n    getAsArray() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n}\r\nexport class PlayerPhysicsData {\r\n    tags;\r\n    constructor(buffer, initData) {\r\n        this.tags = new RemoteTagManager(\"player-physics-tags\");\r\n        this.tags.$INIT(initData);\r\n        this.tags.setBuffer(buffer);\r\n        this.pick._s = this;\r\n        this.states._s = this;\r\n        this.is._s = this;\r\n        this.nowIs._s = this;\r\n    }\r\n    position = new DBTVec3(PlayerPhysicsTagIDs.position, this);\r\n    pick = {\r\n        _s: {},\r\n        normal: new DBTVec3(PlayerPhysicsTagIDs.pickNormals, this),\r\n        position: new DBTVec3(PlayerPhysicsTagIDs.pickPosition, this),\r\n        getPlacePosition() {\r\n            return [\r\n                this.position.x + this.normal.x,\r\n                this.position.y + this.normal.y,\r\n                this.position.z + this.normal.z,\r\n            ];\r\n        },\r\n        getPlaceVec3() {\r\n            return {\r\n                x: this.position.x + this.normal.x,\r\n                y: this.position.y + this.normal.y,\r\n                z: this.position.z + this.normal.z,\r\n            };\r\n        },\r\n    };\r\n    direction = new DBTVec3(PlayerPhysicsTagIDs.direction, this);\r\n    sideDirection = new DBTVec3(PlayerPhysicsTagIDs.sideDirection, this);\r\n    rotation = new DBTVec3(PlayerPhysicsTagIDs.rotation, this);\r\n    states = {\r\n        _s: {},\r\n        get movement() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.movement);\r\n        },\r\n        set movement(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.movement, v);\r\n        },\r\n        get secondaryMovement() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.secondaryMovement);\r\n        },\r\n        set secondaryMovement(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.secondaryMovement, v);\r\n        },\r\n        get jumping() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.jumping);\r\n        },\r\n        set jumping(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.jumping, v);\r\n        },\r\n        get running() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.running);\r\n        },\r\n        set running(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.running, v);\r\n        },\r\n        get onGround() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.onGround) == 1;\r\n        },\r\n        set onGround(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.onGround, v ? 1 : 0);\r\n        },\r\n        get inWater() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.inWater) == 1;\r\n        },\r\n        set inWater(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.inWater, v ? 1 : 0);\r\n        },\r\n    };\r\n    get eyeLevel() {\r\n        return this.tags.getTag(PlayerPhysicsTagIDs.eyeLevel) / 10;\r\n    }\r\n    set eyeLevel(v) {\r\n        if (!Number.isInteger(v)) {\r\n            v = (v * 10) >> 0;\r\n        }\r\n        this.tags.setTag(PlayerPhysicsTagIDs.eyeLevel, v);\r\n    }\r\n    nowIs = {\r\n        _s: {},\r\n        still() {\r\n            this._s.states.movement = PlayerPhysicsStatesValues.still;\r\n            this._s.states.secondaryMovement =\r\n                PlayerPhysicsStatesValues.secondaryStill;\r\n        },\r\n        walkingForward(v = true) {\r\n            this._s.states.movement = v\r\n                ? PlayerPhysicsStatesValues.walkingForward\r\n                : PlayerPhysicsStatesValues.still;\r\n        },\r\n        walkingBackward(v = true) {\r\n            this._s.states.movement = v\r\n                ? PlayerPhysicsStatesValues.walkingBackward\r\n                : PlayerPhysicsStatesValues.still;\r\n        },\r\n        walkingLeft(v = true) {\r\n            this._s.states.secondaryMovement = v\r\n                ? PlayerPhysicsStatesValues.walkingLeft\r\n                : PlayerPhysicsStatesValues.secondaryStill;\r\n        },\r\n        walkingRight(v = true) {\r\n            this._s.states.secondaryMovement = v\r\n                ? PlayerPhysicsStatesValues.walkingRight\r\n                : PlayerPhysicsStatesValues.secondaryStill;\r\n        },\r\n        jumping(v = true) {\r\n            this._s.states.jumping = v ? 1 : 0;\r\n        },\r\n        running(v = true) {\r\n            this._s.states.running = v ? 1 : 0;\r\n        },\r\n    };\r\n    is = {\r\n        _s: {},\r\n        get walking() {\r\n            return this._s.states.movement || this._s.states.secondaryMovement > 1;\r\n        },\r\n        get running() {\r\n            return this._s.states.running;\r\n        },\r\n        get onGround() {\r\n            return this._s.states.onGround;\r\n        },\r\n        get inWater() {\r\n            return this._s.states.inWater;\r\n        },\r\n    };\r\n}\r\n","import { RemoteTagManager } from \"divine-binary-tags/index.js\";\r\nexport const PlayerStatsTags = new RemoteTagManager(\"player-stats-tags\");\r\nexport const PlayerStatsTagIDs = {\r\n    header: \"#header\",\r\n    level: \"#level\",\r\n    exp: \"#exp\",\r\n    maxMana: \"#max_mana\",\r\n    currentMana: \"#current_mana\",\r\n    maxEnegery: \"#max_energy\",\r\n    currentEnergy: \"#current_energy\",\r\n    speed: \"#speed\",\r\n    jumpPower: \"#jump_power\",\r\n    intuition: \"#intuition\",\r\n};\r\nexport class PlayerStatsData {\r\n    tags = new RemoteTagManager(\"player-stairs-data\");\r\n    constructor(sab, initData) {\r\n        this.tags.$INIT(initData);\r\n        this.tags.setBuffer(sab);\r\n    }\r\n    get level() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.level);\r\n    }\r\n    set level(level) {\r\n        this.tags.setTag(PlayerStatsTagIDs.level, level);\r\n    }\r\n    get exp() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.exp);\r\n    }\r\n    set exp(exp) {\r\n        this.tags.setTag(PlayerStatsTagIDs.exp, exp);\r\n    }\r\n    get maxMana() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.maxMana);\r\n    }\r\n    set maxMana(maxMana) {\r\n        this.tags.setTag(PlayerStatsTagIDs.maxMana, maxMana);\r\n    }\r\n    get currentMana() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.currentMana);\r\n    }\r\n    set currentMana(currentMana) {\r\n        this.tags.setTag(PlayerStatsTagIDs.currentMana, currentMana);\r\n    }\r\n    get maxEnegery() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.maxEnegery);\r\n    }\r\n    set maxEnegery(maxEnegery) {\r\n        this.tags.setTag(PlayerStatsTagIDs.maxEnegery, maxEnegery);\r\n    }\r\n    get currentEnergy() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.currentEnergy);\r\n    }\r\n    set currentEnergy(currentEnergy) {\r\n        this.tags.setTag(PlayerStatsTagIDs.currentEnergy, currentEnergy);\r\n    }\r\n    get speed() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.speed);\r\n    }\r\n    set speed(speed) {\r\n        this.tags.setTag(PlayerStatsTagIDs.speed, speed);\r\n    }\r\n    get jumpPower() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.jumpPower);\r\n    }\r\n    set jumpPower(jumpPower) {\r\n        this.tags.setTag(PlayerStatsTagIDs.jumpPower, jumpPower);\r\n    }\r\n    get intuition() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.intuition);\r\n    }\r\n    set intuition(intuition) {\r\n        this.tags.setTag(PlayerStatsTagIDs.intuition, intuition);\r\n    }\r\n}\r\n","import { TagManager } from \"divine-binary-tags\";\r\nimport { PlayerPhysicsTagIDs } from \"./PlayerPhysicsData.js\";\r\nimport { PlayerStatsTagIDs } from \"./PlayerStatsData.js\";\r\nexport function $RegisterPlayerData() {\r\n    const playerPhysicsTagManager = new TagManager(\"player-physics-tags\");\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.header,\r\n        type: \"header\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.position,\r\n        type: \"typed-number-array\",\r\n        numberType: \"64f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.pickPosition,\r\n        type: \"typed-number-array\",\r\n        numberType: \"64f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.pickNormals,\r\n        type: \"typed-number-array\",\r\n        numberType: \"8i\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.rotation,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.direction,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.sideDirection,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.eyeLevel,\r\n        type: \"typed-number\",\r\n        numberType: \"8ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.movement,\r\n        type: \"typed-number\",\r\n        numberType: \"8ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.secondaryMovement,\r\n        type: \"typed-number\",\r\n        numberType: \"8ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.jumping,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.running,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.onGround,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.inWater,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.$INIT({ indexBufferMode: \"shared\" });\r\n    const playerStatesTagManger = new TagManager(\"player-states-tags\");\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.header,\r\n        type: \"header\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.level,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.exp,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.currentMana,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.maxMana,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.currentEnergy,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.maxEnegery,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.speed,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.jumpPower,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.intuition,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.$INIT({ indexBufferMode: \"shared\" });\r\n    return {\r\n        playerPhysicsTagManager,\r\n        playerStatesTagManger,\r\n    };\r\n}\r\n"],"names":[],"sourceRoot":""}