{"version":3,"file":"DSLIBS_dvePlugIns_Player_dist_Data_PlayerManager_js-DSLIBS_dvePlugIns_Player_dist_Data_Regist-d31b5c.DVE.js","mappings":";;;;;;;;;;;;;AAAO;AACP;AACA,eAAe;AACf,aAAa;AACb,mBAAmB;AACnB;;;;;;;;;;;;;;;;;;;ACLsD;AAC/C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACO,8BAA8B,gEAAgB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,wBAAwB,gEAAgB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,cAAc;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACnM+D;AACxD,4BAA4B,yEAAgB;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1EgD;AACa;AACJ;AAClD;AACP,wCAAwC,0DAAU;AAClD;AACA,YAAY,6EAA0B;AACtC;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,mFAAgC;AAC5C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,kFAA+B;AAC3C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,gFAA6B;AACzC;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,oFAAiC;AAC7C;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,+EAA4B;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,sFAAmC;AAC/C;AACA;AACA,KAAK;AACL;AACA,YAAY,+FAA4C;AACxD;AACA;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL;AACA,YAAY,sFAAmC;AAC/C;AACA,KAAK;AACL;AACA,YAAY,qFAAkC;AAC9C;AACA,KAAK;AACL,oCAAoC,2BAA2B;AAC/D,sCAAsC,0DAAU;AAChD;AACA,YAAY,yEAAwB;AACpC;AACA;AACA,KAAK;AACL;AACA,YAAY,wEAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,sEAAqB;AACjC;AACA;AACA,KAAK;AACL;AACA,YAAY,8EAA6B;AACzC;AACA;AACA,KAAK;AACL;AACA,YAAY,0EAAyB;AACrC;AACA;AACA,KAAK;AACL;AACA,YAAY,gFAA+B;AAC3C;AACA;AACA,KAAK;AACL;AACA,YAAY,6EAA4B;AACxC;AACA;AACA,KAAK;AACL;AACA,YAAY,wEAAuB;AACnC;AACA;AACA,KAAK;AACL;AACA,YAAY,4EAA2B;AACvC;AACA;AACA,KAAK;AACL;AACA,YAAY,4EAA2B;AACvC;AACA;AACA,KAAK;AACL,kCAAkC,2BAA2B;AAC7D;AACA;AACA;AACA;AACA","sources":["webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerManager.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerPhysicsData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/PlayerStatsData.js","webpack://dve-testing/../../DSLIBS/dvePlugIns/Player/dist/Data/RegisterPlayerData.js"],"sourcesContent":["export const PlayerManager = {\r\n    currentDimension: \"main\",\r\n    physics: {},\r\n    stats: {},\r\n    $INIt(data) { },\r\n};\r\n","import { RemoteTagManager } from \"divine-binary-tags\";\r\nexport const PlayerPhysicsStatesValues = {\r\n    still: 0,\r\n    secondaryStill: 1,\r\n    walkingForward: 2,\r\n    walkingBackward: 3,\r\n    walkingLeft: 4,\r\n    walkingRight: 5,\r\n};\r\nexport const PlayerPhysicsTagIDs = {\r\n    header: \"#header\",\r\n    position: \"#position\",\r\n    pickPosition: \"#pick-position\",\r\n    pickNormals: \"#pick-normals\",\r\n    direction: \"#direction\",\r\n    sideDirection: \"#side-direction\",\r\n    rotation: \"#rotation\",\r\n    eyeLevel: \"#eye-level\",\r\n    states: {\r\n        movement: \"#movement-state\",\r\n        secondaryMovement: \"#secondary-movement-state\",\r\n        jumping: \"#is-jumping\",\r\n        running: \"#is-running\",\r\n        onGround: \"#is-on-ground\",\r\n        inWater: \"#is-in-water\",\r\n    },\r\n};\r\nexport const PlayerPhysicsTags = new RemoteTagManager(\"player-physics-tags\");\r\nclass DBTVec3 {\r\n    tagId;\r\n    parent;\r\n    constructor(tagId, parent) {\r\n        this.tagId = tagId;\r\n        if (parent) {\r\n            this.parent = parent;\r\n        }\r\n    }\r\n    set(x, y, z) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n    }\r\n    get x() {\r\n        return this.parent.tags.getArrayTagValue(this.tagId, 0);\r\n    }\r\n    set x(v) {\r\n        this.parent.tags.setArrayTagValue(this.tagId, 0, v);\r\n    }\r\n    get y() {\r\n        return this.parent.tags.getArrayTagValue(this.tagId, 1);\r\n    }\r\n    set y(v) {\r\n        this.parent.tags.setArrayTagValue(this.tagId, 1, v);\r\n    }\r\n    get z() {\r\n        return this.parent.tags.getArrayTagValue(this.tagId, 2);\r\n    }\r\n    set z(v) {\r\n        this.parent.tags.setArrayTagValue(this.tagId, 2, v);\r\n    }\r\n    getAsArray() {\r\n        return [this.x, this.y, this.z];\r\n    }\r\n}\r\nexport class PlayerPhysicsData {\r\n    tags;\r\n    constructor(buffer, initData) {\r\n        this.tags = new RemoteTagManager(\"player-physics-tags\");\r\n        this.tags.$INIT(initData);\r\n        this.tags.setBuffer(buffer);\r\n        this.pick._s = this;\r\n        this.states._s = this;\r\n        this.is._s = this;\r\n        this.nowIs._s = this;\r\n    }\r\n    position = new DBTVec3(PlayerPhysicsTagIDs.position, this);\r\n    pick = {\r\n        _s: {},\r\n        normal: new DBTVec3(PlayerPhysicsTagIDs.pickNormals, this),\r\n        position: new DBTVec3(PlayerPhysicsTagIDs.pickPosition, this),\r\n        getPlacePosition() {\r\n            return [\r\n                this.position.x + this.normal.x,\r\n                this.position.y + this.normal.y,\r\n                this.position.z + this.normal.z,\r\n            ];\r\n        },\r\n        getPlaceVec3() {\r\n            return {\r\n                x: this.position.x + this.normal.x,\r\n                y: this.position.y + this.normal.y,\r\n                z: this.position.z + this.normal.z,\r\n            };\r\n        },\r\n    };\r\n    direction = new DBTVec3(PlayerPhysicsTagIDs.direction, this);\r\n    sideDirection = new DBTVec3(PlayerPhysicsTagIDs.sideDirection, this);\r\n    rotation = new DBTVec3(PlayerPhysicsTagIDs.rotation, this);\r\n    states = {\r\n        _s: {},\r\n        get movement() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.movement);\r\n        },\r\n        set movement(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.movement, v);\r\n        },\r\n        get secondaryMovement() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.secondaryMovement);\r\n        },\r\n        set secondaryMovement(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.secondaryMovement, v);\r\n        },\r\n        get jumping() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.jumping);\r\n        },\r\n        set jumping(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.jumping, v);\r\n        },\r\n        get running() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.running);\r\n        },\r\n        set running(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.running, v);\r\n        },\r\n        get onGround() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.onGround) == 1;\r\n        },\r\n        set onGround(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.onGround, v ? 1 : 0);\r\n        },\r\n        get inWater() {\r\n            return this._s.tags.getTag(PlayerPhysicsTagIDs.states.inWater) == 1;\r\n        },\r\n        set inWater(v) {\r\n            this._s.tags.setTag(PlayerPhysicsTagIDs.states.inWater, v ? 1 : 0);\r\n        },\r\n    };\r\n    get eyeLevel() {\r\n        return this.tags.getTag(PlayerPhysicsTagIDs.eyeLevel) / 10;\r\n    }\r\n    set eyeLevel(v) {\r\n        if (!Number.isInteger(v)) {\r\n            v = (v * 10) >> 0;\r\n        }\r\n        this.tags.setTag(PlayerPhysicsTagIDs.eyeLevel, v);\r\n    }\r\n    nowIs = {\r\n        _s: {},\r\n        still() {\r\n            this._s.states.movement = PlayerPhysicsStatesValues.still;\r\n            this._s.states.secondaryMovement =\r\n                PlayerPhysicsStatesValues.secondaryStill;\r\n        },\r\n        walkingForward(v = true) {\r\n            this._s.states.movement = v\r\n                ? PlayerPhysicsStatesValues.walkingForward\r\n                : PlayerPhysicsStatesValues.still;\r\n        },\r\n        walkingBackward(v = true) {\r\n            this._s.states.movement = v\r\n                ? PlayerPhysicsStatesValues.walkingBackward\r\n                : PlayerPhysicsStatesValues.still;\r\n        },\r\n        walkingLeft(v = true) {\r\n            this._s.states.secondaryMovement = v\r\n                ? PlayerPhysicsStatesValues.walkingLeft\r\n                : PlayerPhysicsStatesValues.secondaryStill;\r\n        },\r\n        walkingRight(v = true) {\r\n            this._s.states.secondaryMovement = v\r\n                ? PlayerPhysicsStatesValues.walkingRight\r\n                : PlayerPhysicsStatesValues.secondaryStill;\r\n        },\r\n        jumping(v = true) {\r\n            this._s.states.jumping = v ? 1 : 0;\r\n        },\r\n        running(v = true) {\r\n            this._s.states.running = v ? 1 : 0;\r\n        },\r\n    };\r\n    is = {\r\n        _s: {},\r\n        get walking() {\r\n            return this._s.states.movement || this._s.states.secondaryMovement > 1;\r\n        },\r\n        get running() {\r\n            return this._s.states.running;\r\n        },\r\n        get onGround() {\r\n            return this._s.states.onGround;\r\n        },\r\n        get inWater() {\r\n            return this._s.states.inWater;\r\n        },\r\n    };\r\n}\r\n","import { RemoteTagManager } from \"divine-binary-tags/index.js\";\r\nexport const PlayerStatsTags = new RemoteTagManager(\"player-stats-tags\");\r\nexport const PlayerStatsTagIDs = {\r\n    header: \"#header\",\r\n    level: \"#level\",\r\n    exp: \"#exp\",\r\n    maxMana: \"#max_mana\",\r\n    currentMana: \"#current_mana\",\r\n    maxEnegery: \"#max_energy\",\r\n    currentEnergy: \"#current_energy\",\r\n    speed: \"#speed\",\r\n    jumpPower: \"#jump_power\",\r\n    intuition: \"#intuition\",\r\n};\r\nexport class PlayerStatsData {\r\n    tags = new RemoteTagManager(\"player-stairs-data\");\r\n    constructor(sab, initData) {\r\n        this.tags.$INIT(initData);\r\n        this.tags.setBuffer(sab);\r\n    }\r\n    get level() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.level);\r\n    }\r\n    set level(level) {\r\n        this.tags.setTag(PlayerStatsTagIDs.level, level);\r\n    }\r\n    get exp() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.exp);\r\n    }\r\n    set exp(exp) {\r\n        this.tags.setTag(PlayerStatsTagIDs.exp, exp);\r\n    }\r\n    get maxMana() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.maxMana);\r\n    }\r\n    set maxMana(maxMana) {\r\n        this.tags.setTag(PlayerStatsTagIDs.maxMana, maxMana);\r\n    }\r\n    get currentMana() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.currentMana);\r\n    }\r\n    set currentMana(currentMana) {\r\n        this.tags.setTag(PlayerStatsTagIDs.currentMana, currentMana);\r\n    }\r\n    get maxEnegery() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.maxEnegery);\r\n    }\r\n    set maxEnegery(maxEnegery) {\r\n        this.tags.setTag(PlayerStatsTagIDs.maxEnegery, maxEnegery);\r\n    }\r\n    get currentEnergy() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.currentEnergy);\r\n    }\r\n    set currentEnergy(currentEnergy) {\r\n        this.tags.setTag(PlayerStatsTagIDs.currentEnergy, currentEnergy);\r\n    }\r\n    get speed() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.speed);\r\n    }\r\n    set speed(speed) {\r\n        this.tags.setTag(PlayerStatsTagIDs.speed, speed);\r\n    }\r\n    get jumpPower() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.jumpPower);\r\n    }\r\n    set jumpPower(jumpPower) {\r\n        this.tags.setTag(PlayerStatsTagIDs.jumpPower, jumpPower);\r\n    }\r\n    get intuition() {\r\n        return this.tags.getTag(PlayerStatsTagIDs.intuition);\r\n    }\r\n    set intuition(intuition) {\r\n        this.tags.setTag(PlayerStatsTagIDs.intuition, intuition);\r\n    }\r\n}\r\n","import { TagManager } from \"divine-binary-tags\";\r\nimport { PlayerPhysicsTagIDs } from \"./PlayerPhysicsData.js\";\r\nimport { PlayerStatsTagIDs } from \"./PlayerStatsData.js\";\r\nexport function $RegisterPlayerData() {\r\n    const playerPhysicsTagManager = new TagManager(\"player-physics-tags\");\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.header,\r\n        type: \"header\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.position,\r\n        type: \"typed-number-array\",\r\n        numberType: \"64f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.pickPosition,\r\n        type: \"typed-number-array\",\r\n        numberType: \"64f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.pickNormals,\r\n        type: \"typed-number-array\",\r\n        numberType: \"8i\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.rotation,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.direction,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.sideDirection,\r\n        type: \"typed-number-array\",\r\n        numberType: \"32f\",\r\n        length: 3,\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.eyeLevel,\r\n        type: \"typed-number\",\r\n        numberType: \"8ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.movement,\r\n        type: \"typed-number\",\r\n        numberType: \"8ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.secondaryMovement,\r\n        type: \"typed-number\",\r\n        numberType: \"8ui\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.jumping,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.running,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.onGround,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.registerTag({\r\n        id: PlayerPhysicsTagIDs.states.inWater,\r\n        type: \"boolean\",\r\n    });\r\n    playerPhysicsTagManager.$INIT({ indexBufferMode: \"shared\" });\r\n    const playerStatesTagManger = new TagManager(\"player-states-tags\");\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.header,\r\n        type: \"header\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.level,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.exp,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.currentMana,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.maxMana,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.currentEnergy,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.maxEnegery,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.speed,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.jumpPower,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.registerTag({\r\n        id: PlayerStatsTagIDs.intuition,\r\n        type: \"typed-number\",\r\n        numberType: \"16ui\",\r\n    });\r\n    playerStatesTagManger.$INIT({ indexBufferMode: \"shared\" });\r\n    return {\r\n        playerPhysicsTagManager,\r\n        playerStatesTagManger,\r\n    };\r\n}\r\n"],"names":[],"sourceRoot":""}